<slide .title-slide .segue .nobackground>
  <hgroup .auto-fadein>
    <h1>cpprefjpを支える技術
    <p>@cpp_akira, @melponn

^{index Nothing}

^{index (Just "overview")}

<slide>
  <hgroup>
    <h2>^{title "overview"}
  <article>
    <ul>
      <li>こんなページです
    <iframe data-src="https://sites.google.com/site/cpprefjp/" sandbox="allow-same-origin">

<slide>
  <hgroup>
    <h2>^{title "overview"}
  <article>
    <ul>
      <li>標準C++のリファレンスサイト
      <li>Google Sitesを使ってる
        <ul>
          <li>Google製のWiki。
      <li>2014年3月現在で2,000ページ超。

<slide>
  <hgroup>
    <h2>^{title "overview"}
  <article>
    <ul>
      <li>現在、ページを作成・編集するためにGoogle Sitesを直接叩いているわけではない。
      <li>cpprefjpの裏側がどうなっているのかについて話します。

^{index (Just "problem")}

<slide>
  <hgroup>
    <h2>^{title "problem"}
  <article>
    <img src=@{StaticR publication_img_cpprefjp_ui_png} alt="cpprefjpのUI">

<slide>
  <hgroup>
    <h2>^{title "problem"}
  <article>
    <ul>
      <li>Google Sitesでリファレンスを書くのは、けっこう大変だった。
        <ul>
          <li>グラフィカルな操作は、作業者が統一的な書き方をするには困難だった。
          <li>マウスでポチポチ押してコードのフォントを直していくのがしんどかった。
          <li>シンタックスハイライトが無くて見にくかった。

^{index (Just "do")}

<slide>
  <hgroup>
    <h2>作業環境をGitHubに移行した
  <article>
    <ul>
      <li>プレーンテキストで書きたい！
        <ul>
          <li>書き方の統一を容易にするため
          <li>バージョン管理しやすくするため
    <ul .build>
      <li>→ MarkdownをGitHubリポジトリで管理することにした。

<slide>
  <hgroup>
    <h2>移行は作業環境のみ
  <article>
    <ul>
      <li>Google Sitesはそのままにした。
        <ul>
          <li>この時点で既に1200ページ以上あり、それらのページを行方不明にするのは良くない。
      <li>GitHubで書いたMarkdownを、自動的にHTMLに変換してGoogle Sitesに同期する仕組みを作った。

<slide>
  <hgroup>
    <h2>移行ツール（初回のみ）
  <article>
    <img src=@{StaticR publication_img_cpprefjp_to_github_png} alt="cpprefjpからMarkdownへ変換">

<slide>
  <hgroup>
    <h2>移行ツール（運用中）
  <article>
    <img src=@{StaticR publication_img_github_to_cpprefjp_png} alt="Markdownからcpprefjpへ変換">

^{index (Just "1st")}

<slide>
  <hgroup>
    <h2>Google SitesからHTMLをダウンロードする
  <article>
    <ul>
      <li>Google Apps ScriptというJavaScriptの方言を使った
      <li>Google SitesのAPIは、1日に呼べる回数が決まっているので、何回かに分けてダウンロードした。

<slide>
  <hgroup>
    <h2>HTMLをMarkdownに変換
  <article>
    <ul>
      <li>Ruby 1.9を使って、HTMLを正規表現でがんばってMarkdownに変換した。
      <li>完全には自動変換できなかったので、その後全部のリファレンスを手動で手直しした。
      <li>なのでこのツールは使い捨て。

^{index (Just "2nd")}

^{index2 Nothing}
^{index2 (Just "motivation")}

<slide>
  <hgroup>
    <h2>当時のめるぽんについて
  <article>
    <ul>
      <li>GitHub移行プロジェクト、@cpp_akira がやってるのを見てるだけだった。
      <li>GitHubからMarkdownファイルを取得してhtmlにして返すサーバを作るぐらいなら簡単そう。
      <li>なので、一晩かけて軽い気持ちで簡単な変換サーバを書いてみた。

<slide>
  <hgroup>
    <h2>管理者になってしまった
  <article>
    <img .large-image src=@{StaticR publication_img_cpprefjp_comtg1_png}>
    <img .large-image src=@{StaticR publication_img_cpprefjp_comtg2_png}>

^{index2 (Just "create")}

<slide>
  <hgroup>
    <h2>作ったもの
  <article>
    <ul .build>
      <li>変換サーバ（andare）
        <ul>
          <li>GitHubからMarkdownファイルを取得
          <li>それをhtmlにして返す
      <li>アップロード用Google Apps Script
        <ul>
          <li>変換サーバにアクセスしてhtmlを取得
          <li>Google Sitesに毎日アップロードする

<slide>
  <hgroup>
    <h2>移行ツール（運用中）
  <article>
    <img src=@{StaticR publication_img_github_to_cpprefjp_png} alt="Markdownからcpprefjpへ変換">

^{index2 (Just "md-to-html")}

<slide>
  <hgroup>
    <h2>変換サーバの特徴
  <article>
    <ul>
      <li>Python+Django製
      <li><a href="https://pypi.python.org/pypi/Markdown">Markdown</a>というPythonのライブラリでHTMLに変換
      <li>普通のRESTfulなサーバ
        <ul>
          <li><code>GET /contents</code>で更新するファイル一覧を返す
          <li><code>GET /html/:paths</code>で:pathsのデータをHTMLで返す

^{index2 (Just "highlight")}

<slide>
  <hgroup>
    <h2>シンタックスハイライト
  <article>
    <ul>
      <li>「PythonのMarkdownライブラリにシンタックスハイライトあったから入れてみました！」
    <img .large-image src=@{StaticR publication_img_cpprefjp_comtg3_png}>

<slide>
  <hgroup>
    <h2>シンタックスハイライト
  <article>
    <ul>
      <li>リンクや色を付けれるようにした
      <li>意外と面倒だった
    <iframe data-src="https://sites.google.com/site/cpprefjp/article/at_thread_exit" sandbox="allow-same-origin">

<slide>
  <hgroup>
    <h2>シンタックスハイライトの仕組み
  <article>
    <ul>
      <li>PythonのMarkdownライブラリはコードを渡したら適当にHTMLに変換してくれる仕組み
      <li>つまり特定の文字を色付けとかできない
      <li>そこで考えた

<slide>
  <hgroup>
    <h2>シンタックスハイライトの仕組み
  <article>
    <ul>
      <li>そうだ力づくで解決しよう（考えてない）
        <ol>
          <li>コードから修飾したい文字列を探してランダムな文字列を埋め込む
          <li>HTMLに変換する
          <li>最初に使ったランダムな文字列を検索して適当なタグに置き換える

<slide>
  <hgroup>
    <h2>シンタックスハイライトの仕組み
  <article>
    <pre>
      <code  .medium-font>
        \int main() {
        \    std::vector&lt;int&gt; v;
        \    v.<b>push_back</b>(10);
        \}
    <ul>
      <li>push_backを赤文字にしたい場合

<slide>
  <hgroup>
    <h2>シンタックスハイライトの仕組み
  <article>
    <pre>
      <code .medium-font>
        \int main() {
        \    std::vector&lt;int&gt; v;
        \    v.<b>Yg88HuTPpush_backYg88HuTP</b>(10);
        \}
    <ul>
      <li>push_backの前後にランダムな文字列を埋め込む

<slide>
  <hgroup>
    <h2>シンタックスハイライトの仕組み
  <article>
    <pre>
      <code .medium-font>
        \&lt;span ...&gt;int&lt;/span&gt; main() {
        \    std::vector&amp;lt;&lt;span ...&gt;int&lt;/span&gt;&amp;gt; v;
        \    v.<b>Yg88HuTPpush_backYg88HuTP</b>(&lt;span ...&gt;10&lt;/span&gt;);
        \}
    <ul>
      <li>HTMLに変換する

<slide>
  <hgroup>
    <h2>シンタックスハイライトの仕組み
  <article>
    <pre>
      <code .medium-font>
        \&lt;span ...&gt;int&lt;/span&gt; main() {
        \    std::vector&amp;lt;&lt;span ...&gt;int&lt;/span&gt;&amp;gt; v;
        \    v.<b>&lt;span style="color:red"&gt;push_back&lt;/span&gt;</b>(&lt;span ...&gt;10&lt;/span&gt;);
        \}
    <ul>
      <li>ランダムな文字列を適切なタグにする

<slide>
  <hgroup>
    <h2>シンタックスハイライトの仕組み
  <article>
    <pre>
      <code .prettyprint .medium-font>
        \int main() {
        \    std::vector&lt;int&gt; v;
        \    v.<span id="highlight">push_back</span>(10);
        \}
    <ul>
      <li>結果

<slide>
  <hgroup>
    <h2>なぜ〜という方法でやらないのか？
  <article>
    <ul>
      <li>普通に変換後のHTMLを置換
        <ul>
          <li>classやspanを強調表示するとHTMLがグチャグチャになる
      <li>ランダムでない文字列を埋め込む
        <ul>
          <li>その文字列がハイライトの対象になる可能性が高い

^{index2 (Just "github")}

<slide>
  <hgroup>
    <h2>GitHubで差分管理
  <article>
    <ul>
      <li>現在2,000ページ超のページがある
      <li>毎日全部更新するのは厳しい
      <li>更新があったファイルだけ更新させたい
    <ul .build>
      <li>そうだGitHubを使おう

<slide>
  <hgroup>
    <h2>GitHubで差分管理
  <article>
    <ul>
      <li>サーバ内にcpprefjpのリポジトリをcloneしておく
      <li>cpprefjpリポジトリには２つローカルブランチを作っておく
        <ul>
          <li>cpprefjpの最新版を置いておく<b class="master-branch">masterブランチ</b>
          <li>Google Sitesに上がっている最新版を置いておく<b class="site-branch">siteブランチ</b>
          <li><b class="master-branch">masterブランチ</b>は常に<b class="site-branch">siteブランチ</b>と同じか進んでいる状態になる

<slide>
  <hgroup>
    <h2>GitHubで差分管理
  <article>
    <ul>
      <li><b class="master-branch">masterブランチ</b>と<b class="site-branch">siteブランチ</b>の違いを見れば更新ファイルが分かる
    <pre .prettyprint .large-font>
      <code>
        \$ git diff --name-status site master
        \M	implementation.md
        \A	reference/vector.md
        \D	reference/memory.md
    <ul>
      <li>Google Sitesを更新したら<b class="master-branch">masterブランチ</b>を<b class="site-branch">siteブランチ</b>へマージ

^{index2 (Just "html-to-google")}


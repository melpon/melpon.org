<h1>導入
<h2>Yesodとは
<p>型安全なWebフレームワーク。型安全URLによって送信したデータのURLが有効であることが保証される。また、生データを境界部分でマーシャリングして型に直すため、クライアントとのやりとりや、永続データの保存も型安全になる。

<h2>要約
<p>Yesodはボイラープレートをできるだけ回避し、ユーザの手を煩わせずに可能な限りHaskellの機能を使うようにしている。
<ul>
  <li>フォームライブラリは、Applicative型クラスを使って共通コードを減らしている
  <li>ルーティングは、型安全性を犠牲にせずにとても短い形式で定義している
  <li>データベースは、コードの自動生成を使ってデータをシリアライズしている

<p>Yesodで"コード生成"と言ったとき、２つの意味がある。
<ul>
  <li>スカフォードツールによるファイルやフォルダのセットアップ
  <li>コンパイル時にメタプログラミングによって生成されるコード
<p>大抵は後者を意味する。自動コード生成のおかげで、ライブラリをアップデートするだけで（自動生成されるコードは）最新になる。
<p>もちろん、自動生成されるコードを自分で書いても構わない。

<h2>パフォーマンス

<p>Yesodのパフォーマンスは、他のフレームワークと比べて以下のアドバンテージがある。
<ul>
  <li>コンパイルによるアドバンテージ
  <ul>
    <li>コンパイルするので高速
    <li>GHC 自体がパフォーマンスの最適化を頑張っていて、今もさらに向上させようとしている
  <li>アーキテクチャによるアドバンテージ
  <ul>
    <li>HTML, CSS, JavaScript のテンプレートを静的に解析する
    <ul>
      <li>ディスクI/O回避
      <li>レンダリングの最適化
    <li>enumeratorやbuilderといった抽象化されたライブラリを使う
    <ul>
      <li>一定量のメモリで実行可能
      <li>高い圧縮性
      <li>CSS, JavaScriptのキャッシュ
  <li>サーバーによるアドバンテージ
  <ul>
    <li>Haskell の Web サーバーの中で一番高速な Warp というサーバーを使っている

<h2>モジュール性

<p>Yesodプロジェクトのゴールの１つは、可能な限りコミュニティにコントリビュートすること。Yesodは多くのパッケージを生み出したけれども、それらの多くはYesodと依存関係を持たない。次のプロジェクトでYesodを使わないとしても、Yesodが使っているライブラリを知るだけで大分勉強になるはずだ。
<p>ただもちろん、これらのライブラリはまとめて使われることを想定している。そうすることで、ライブラリ間のインターフェースや一貫性などを見て勉強になるだろう。

<h2>固定機能

<p>Haskell はある問題を解決するパワフルなライブラリが複数ある。複雑な選択によって、どのライブラリを使うかという決定が成される。
<p>実際にYesodとHamlet（デフォルトのテンプレート言語）が、テキストコンテンツの生成のために blaze-builder を使っている。これが選ばれた理由は、blaze はUTF-8のデータを生成する最速のインターフェースを提供しているからである。Text のような、ここに無い他の素晴らしいライブラリを使いたいなら、blaze を捨ててそうしても問題は無い。

<h2>Haskellの導入

<p>Haskell はパワフルで、高速で、型安全な関数型プログラミング言語である。Yesodを理解するにあたり、Haskellの基本は理解しておいた方がいい。
<p>Haskellを学習するなら、オンラインで読める２つの素晴らしい本がある。
<ul>
  <li>
    <a href=http://learnyouahaskell.com/>Learn You a Haskell for Great Good!
  <li>
    <a href=http://book.realworldhaskell.org/read>Real World Haskell

<p>Yesodは、Haskellのほとんどのチュートリアルでは説明してない機能ばかりを使っている。それを理解する必要があるという状況はほとんど無いと思うが、それらがどうなっているかを知ることでYesodに対する理解が深まるだろう。いくつかはappendixで説明する。

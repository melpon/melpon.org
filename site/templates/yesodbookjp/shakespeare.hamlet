<h1>Shakespeare テンプレート

<p>Yesod は Shakespeare ファミリーを使っている。これは HTML, CSS, JavaScript を生成するためのテンプレート言語である。この言語ファミリーは、全体的に共通の構文になっている。

<p>これらのテンプレート言語には以下の特徴がある。
<ul>
  <li>コンテンツの正当性を、コンパイル時に保証する
  <li>厳密な型安全性で、XSS アタックを防止する
  <li>型安全な URL で、可能な場所では常に自動的に有効な URL であることをチェックする、

<p>当然これらのテンプレート言語は、Yesod とは無関係に単独で使うことができる。

<h2>概要

<p>Hamlet と Cassius は両方、ネストのためにインデントを使用する whitespace-sensitive フォーマットである。Lucius は、Cassius とはまた別の構文で、CSS のスーパーセットとして使えるようになっている。Julius は単純に JavaScript に変数補間を加えただけの言語である。

<dl>
  <dt>Hamlet (HTML)
  <dd>
    <pre .hamlet>#{code1}
<dl>
  <dt>Cassius (CSS)
  <dd>
    <pre .cassius>#{code2}
<dl>
  <dt>Lucius (CSS)
  <dd>
    <pre .lucius>#{code3}
<dl>
  <dt>Julius (JavaScript)
  <dd>
    <pre .julius>#{code4}

<h2>型

<p>型は XSS アタックから守ってくれる。例えば以下のような、何らかの名前を表示する HTML テンプレートを持っていたとする。
<pre .hamlet>#{code5}
<aside>&#035;{...} は Shakespeare の変数補間である。

<p>name が String 型や Text 型だった場合は、単にテキストをそのまま埋め込むだけでなく、"&lt;"を"&amp;lt;"にするといったエンティティエンコードを行なう。エンコードを行いたくない場合は preEscaped ファミリーの関数を使う。

<p>
  詳細に言えば、<code>&#035;{...}</code> に入れる型は ToHtml 型クラスのインスタンスでなければならない。
  ToHtml 型クラスは、Html 型を生成する toHtml 関数を持っている。
  ToHtml 型クラスのインスタンスである String や Text は、toHtml 関数内で文字列のエスケープを行った上で Html に変換する。
  preEscaped ファミリーの関数は、エスケープを行なわずに Html に変換する関数である。
  Html も ToHtml 型クラスのインスタンスであり、toHtml 内では何も行なわない(<code>toHtml = id</code>)。

<aside>
  これらの型や関数は全て #
  <a href="http://hackage.haskell.org/package/blaze-html">blaze-html
  \ パッケージに入っている。
  Hamlet は blaze-html 同士を相互に作用させ、blaze-html の値を生成するための一般的なソリューションになっている。
  また、blaze-html の素晴らしいパフォーマンスのアドバンテージが得られる。

<p>
  Html/ToHtml と同様に、Css/ToCss や Javascript/ToJavascript もある。
  HTML と違い、CSS や JavaScript はユーザの入力を組み込むことはほとんど無いため、XSS アタックを防ぐことが主目的というわけではない。
  これらの主目的は、CSS に HTML を渡したりしていないかといった正当性のチェックを、コンパイル時に行なうことである。

<aside>
  CSS にはもう一つ、色と単位のためのデータ型が用意されているというアドバンテージもある。
  この機能はここでは特に説明していないので、ドキュメントを探し、自分で試してみることを勧める。

<h2>型安全URL

<p>
  Yesodにあるユニークな機能の一つに、型安全 URL がある。
  Shakespeare テンプレートでは、&#035; を使う代わりに &#064; を使うだけで、型安全 URL を組み込むことができる。
  シンタックスの詳細については後で説明するとして、まずは直感的な動作というものについて明確にしていく。

<p>
  http://example.com/profile/home というページから http://example.com/display/time へのリンクを貼るとき、３つの選択肢がある。

<dl>
  <dt>相対リンク
  <dd>../display/time
<dl>
  <dt>絶対リンク、ドメイン無し
  <dd>/display/time
<dl>
  <dt>絶対リンク、ドメイン有り
  <dd>http://example.com/display/time

<p>
  残念なことに、どの方法にも問題がある。
  最初の方法は、どちらかの URL が変更されると壊れる。
  ２番目の方法は、最初の方法よりは変更に強いが、絶対 URL を要求する RSS や Atom フィードを使用することができない。
  ３番目の方法は、ドメイン名を変えるときに全ての URL を更新する必要がある。

<p>
  もっと重要なのは、全ての方法には、ある共通する大きな問題があるということである。
  それは、リンク先が壊れていることをコンパイラが全く警告できないということだ。
  typo によって URL が壊れたとしても、何も起こらない。

<p>
  型安全 URL のゴールは、可能な限り URL をコンパイラにチェックさせることだ。
  そのために、生テキストではなく、データ型を使う。
  上記の２つのリンクを、直和型でモデル化してみよう

<pre .haskell>#{code6}

<p>
  /display/time のようなリンクのために、Time コンストラクタを定義している。
  これでテキストの URL を型で表すことができた。
  しかし最終的にはデータ型ではなくテキストになるため、何らかの方法でデータ型からテキストに変換する必要がある。
  この変換を行なう関数のことを URL レンダリング関数と呼ぶ。
  簡易的な実装は次のようになる。

<pre .haskell>#{code7}

<p>
  実際にはクエリ文字列を引数に取るため、次のようになる。

<pre .haskell>#{code8}

<p>
  この実装を覚えておく必要は無い。Yesod はレンダリング関数を自動的に生成するからだ。
  ここで覚えておく必要があるのは、クエリ文字列も引数に取っているということだけである。

<p>
  ここまでで、レンダリング関数と型安全 URL が出てきたが、これらをどのように使えばいいだろうか。
  Shakespeare テンプレートは、HTML (あるいは CSS, JavaScript) を直接生成しない。
  代わりに、レンダリング関数を渡すと HTML を生成してくれる関数を作る。
  具体的には、Hamlet は次のようなテンプレートがあるとき、

<pre .hamlet>#{code9}

<p>
  以下のような Haskell コードに変換する。

<pre .haskell>#{code10}

<h2>構文

<p>補間の構文は、すべての Shakespeare テンプレートで同じである。ただし、当然 HTML, CSS, JavaScript の、それぞれの言語特有の構文については異なる。

<h3>Hamletの構文

<p>
  Hamlet は単純に HTML を生成する構文を提供するだけでなく、条件やループ、maybeといった基本的な構造の制御も行なう。
  汎用的な Shakespeare テンプレートはロジックを持たない傾向にあるが、実用目的のために構造制御を一部だけ加えている。

<h4>タグ

<p>
  Hamlet のタグは、既存の HTML 構文に近くなるようにしている。
  ただしネストについては、終了タグの代わりにインデントを使う。
  そのため次のような HTML は、

<pre .html>#{code11}

<p>以下のようになる。

<pre .hamlet>#{code12}

<p>
  慣れればこちらの方が簡単だと感じるようになるだろう。
  トリッキーな部分は、タグの前後に空白文字を入れる場合だけだ。
  例えば以下のような HTML を生成したいとする。

<pre .html>#{code13}

<p>"Paragraph" の後ろと "end" の前にそれぞれ空白文字を入れたいなら、２種類のエスケープ文字を使う。

<pre .hamlet>#{code14}

<p>空白文字のエスケープルールは非常にシンプルだ。

<ol>
  <li>行頭のスペース以外の文字がバックスラッシュなら、バックスラッシュは無視される。
  <li>行末の文字がハッシュなら、ハッシュは無視される。

<p>
  また、Hamlet はコンテンツのエンティティをエスケープしない。
  これは既存の HTML を簡単に組み込むためである。
  そのため、上記と同じように動作する HTML は以下のように書くことができる。

<pre .hamlet>#{code15}

<p>
  行頭のタグは自動的に閉じられるが、"i" タグは閉じられないことに注意する必要がある。
  どちらも特にペナルティは無いため、どちらのアプローチを取っても構わない。
  ただし通常、この終了タグの機能はインラインタグのみで使い、それ以外のタグで使うべきではない。

<h4>補間

<p>Haskell の変数を HTML に渡すためには、"補間"という機能を使う。

<pre .hamlet>#{code16}

<p>
  ハッシュ(<code>#</code>) の後ろをブレース(<code>{}</code>)で囲むことで変数補間になる。
  この場合、テンプレートが呼ばれたスコープ内の title 変数が使われる。

<p>
  さらに、補間の中で関数を適用したり、文字列や数値リテラルを使ったり、モジュール修飾したりといったことができる。
  Hamlet は、これらの補間の結果に対して toHtml 関数を適用する。つまり ToHtml インスタンスならどの型でも補間することができる。
  例えば以下のようになる。

<dl>
  <dt>変数補間
  <dd>
    <pre .haskell>#{code17}

<p>
  型安全 URL の場合も、アットマーク(<code>@</code>)を使うという部分以外は、ほとんど変数補間と同じである。
  また、キャレット(<code>^</code>)を使うことで、同じ型の他のテンプレートをそこに埋め込むことができる。

<dl>
  <dt>URL 補間と埋め込み補間
  <dd>
    <pre .haskell>#{code18}

<h4>属性

<p>
  先程のコードでは、"a" タグの中で href 属性を使っている。
  この構文は HTML とほぼ同じだが、この構文を明確にしていく。

<ul>
  <li>イコールの右側では補間が使える
  <li>HTML と同様、イコールと属性値を省略することができる。そのため、<code>&lt;input type=checkbox checked&gt;</code> というのは、全く問題ない構文である。
  <li>id と class については、便利な記法を用意している。id ならハッシュ、class ならピリオドを使い、<code>&lt;p #paragraphid .class1 .class2&gt;</code> と記述することができる。
  <li>属性値の引用符は省略可能だが、属性値に空白を入れたい場合は引用符が必要になる。
  <li>コロン(<code>:</code>)を使うことで、省略可能な属性を追加することができる。isChecked 変数が True であるときだけチェックボックスに checked 属性を付けたいなら、<code>&lt;input type=checkbox :isChecked:checked&gt;</code> と書く。パラグラフを条件付きで赤にしたいなら、<code>&lt;p :isRed:style="color:red"&gt;</code> と書く。

<h4>条件文

<p>
  ロジックは Haskell の中で書き、Hamlet では可能な限りロジックを組み込まないことが重要だ。
  そのため、Hamlet 内でロジックを制御する文は本当に基本的なものしか用意していない。まずは if, elseif, else である。

<pre .hamlet>#{code19}

<p>条件文の条件は、すべて通常の補間と同じルールである。

<h4>Maybe

<p>
  同様に Maybe 値を扱う構造もある。
  これは技術的には、if, isJust, fromJust を利用することで達成できる。
  しかしこれを使うことでもっと便利になり、部分関数になってしまうのを回避することができる。

<pre .hamlet>#{code20}

<p><code>&lt-</code> の左側は単純な識別子でなければならないが、右側は補間と同様に何でも書くことができる。

<h4>Forall

<p>リストに対するループも可能である。

<pre .hamlet>#{code21}

<h4>With

<p>
  ある文を外へ追い出すためには、with を使う。
  それは基本的に、長い式のシノニムを宣言するときに便利である。

<pre .hamlet>#{code22}

<h4>Doctype

<p>
  !!! と書くことで、doctype 文を挿入することができる。
  Hamlet はデフォルトでは HTML5 を使うため、doctype は <code>&lt!DOCTYPE html&gt</code> になる。

<pre .hamlet>#{code23}

<h3>Cassiusの構文

<p>
  Cassius は CSS を生成するためのテンプレート言語だ。
  インデントルールを使うことで、ブレースとセミコロンが不要になっている。
  変数補間と URL 補間を使うことができるが、埋め込み補間は使えない。
  以下のようになる。

<pre .cassius>#{code24}

<h3>Lusiusの構文

<p>
  Cassius が whitespace-sensitive な構文にしたのに対し、Lucius は CSS の構文を維持している。
  そのため、外部の CSS ファイルを、そのまま Lucius として使用することができる。
  ただし Lucius は、CSS に対して以下の点を追加している。

<ul>
  <li>Cassius と同じように、変数補間と URL 補間を使える。
  <li>CSS ブロックをネストできる。
  <li>変数を宣言できる。

<p>
  ２番目の点について説明すると、例えば article タグ内のいくつかのタグに対してあるスタイルを適用したい場合、CSS では以下のように書く必要があった。

<pre .css>#{code25}

<p>
  article を無駄に何度も書くのが面倒であるため、Lucius では以下のように書くことができる。

<pre .lucius>#{code26}

<p>
  また、Lucius は変数を使える。変数を使うことで繰り返しを除去することができる。
  単純な例として、共通で使う色を定義したい場合は以下のようにする。

<pre .lucius>#{code27}

<p>
  これ以外はすべて CSS と同じである。

<h3>Juliusの構文

<p>
  Julius は非常にシンプルだ。変数補間、URL 補間、埋め込み補間を行なうという点以外はすべて JavaScript と同じである。

<aside>
  スカフォードで作った Yesod サイトで JavaScript のコードを見てみると、そのコードが縮められていることに気がつくだろう。
  これは Julius の機能ではない。Yesod が Julius を出力する際に #
  <a href="http://hackage.haskell.org/package/hjsmin">hjsmin
  \ を使って縮めている。

<h2>Shakespeareの呼び出し

<p>
  実際に Haskell コードから Shakespeare テンプレートを呼び出したい場合、その方法は３つある。

<dl>
  <dt>準クォート
  <dd>準クォートを使うことで、Haskell コード内に好きなようにコンテンツを書くことができる。これはコンパイル時に Haskell コードに変換される。
<dl>
  <dt>外部ファイル
  <dd>このファイルはコンパイル時に読み込まれ、Haskell コードに変換される。
<dl>
  <dt>リロードモード
  <dd>
    上記の両方のモードは、何らかの変化があった場合に再コンパイルが必要になる。
    リロードモードは、コンパイル時には外部ファイルと同じ扱いだが、実行時に外部ファイルが書き換えられると、再度パースされる。
    <aside>
      リロードモードは Cassius, Lucius, Julius のみ有効で、Hamlet では使えない。
      これは、Hamlet は実行時に再度パースしても実現不可能な機能を利用しているからである。

<p>
  リリース時には、最初の２つの方法を使うことになるだろう。
  これらはコンパイル時にテンプレートを組み込むため、高いパフォーマンスを発揮する。
  準クォートの特徴は、単純であることだ。全てを１つのファイル内に収めることができる。短いテンプレートならこちらを使った方がいいだろう。
  しかし一般的には、外部ファイルの方法が推奨される。なぜなら、

<ul>
  <li>外部ファイルはロジックの分割ができる。通常、ロジックは分けて記述するべきである。
  <li>外部ファイルとデバッグモードを、CPP マクロで切り替えることが出来る。つまり早く開発しつつ、リリース時には高パフォーマンスにすることが容易である。

<p>
  これらを使うためには、準クォートと Template Haskell が必要になるため、適切に言語拡張をしておく必要がある。

<dl>
  <dt>準クォート
  <dd>
    <pre .haskell>#{code28}
<dl>
  <dt>外部ファイル
  <dd>
    <pre .haskell>#{code29}
  <dd>
    <pre .lucius>#{code30}

<p>
  表にまとめると、以下のようになる。

<table .table>
  <colgroup span=1>
  <thead>
    <tr>
      <th>言語
      <th>準クォート
      <th>外部ファイル
      <th>リロード
  <tbody>
    <tr>
      <th>Hamlet
      <td>hamlet
      <td>hamletFile
      <td>N/A
    <tr>
      <th>Cassius
      <td>cassius
      <td>cassiusFile
      <td>cassiusFileReload
    <tr>
      <th>Lucius
      <td>lucius
      <td>luciusFile
      <td>luciusFileReload
    <tr>
      <th>Julius
      <td>julius
      <td>juliusFile
      <td>juliusFileReload

<h3>Hamlet型の種類

<p>
  Hamlet は型の異なる HTML を生成することができる。
  現在、プレーンな HTML、URL や国際化を含む HTML、ウィジェットの３つである。
  ウィジェットについては別の章で説明する。

<p>
  プレーンな HTML を生成するためには、単純化された Hamlet を使う。これは URL を組み込む Hamlet といくつか異なる点がある。

<ul>
  <li>hamlet, hamletFile という関数ではなく、shamlet, shamletFile を使って生成する。生成される値の型は、変数補間と同じ Html 型である。
  <li>URL 補間ができない。そのため、これを使うとコンパイルエラーになる。
  <li>埋め込み補間は、同じ種類の HTML でなければならない。つまり変数補間と埋め込み補間は、全く同じものになる。

<p>
  国際化 (internationalized: i18n) を行なうには、型安全 URL と同じように、データ型を利用する。
  例えば、まず挨拶を行い、買ったリンゴの数を伝えるアプリケーションを作りたいとしよう。
  まずはこれらのメッセージを表すデータ型を作る。

<pre .haskell>#{code31}

<p>
  次は、型安全 URL と同じように、この型をレンダリングする関数を定義する。

<pre .haskell>#{code32}

<p>
  最後に、これを補間するために、アンダースコア補間を使う。

<pre .hamlet>#{code33}

<p>
  型安全 URL と同様、レンダリング関数を通して補間するための関数がある。

<pre .haskell>#{code34}

<p>
  重要な点は、この関数に renderJapanese, renderEnglish, renderSpanish, renderKligon といったレンダリング関数を渡したり、あるいはリアルタイムで翻訳する関数を渡すことができることだ。
  完全なサンプルプログラムは以下のようになる。

<dl>
  <dt>i18nの例
  <dd>
    <pre .haskell>#{code35}

<h2>その他のShakespeare

<p>
  Shakespeare は、HTML, CSS, JavaScript を生成するためのテンプレート言語だけでなく、汎用的に利用できるものもある。
  shakespeare-text は、Ruby や Python といったスクリプト言語のような、フォーマット文字列を提供する。
  このパッケージは当然、Yesod 以外で利用することも可能である。

<pre .haskell>#{code36}

<p>
  この単純なサンプルの要点は以下の通りである。

<ul>
  <li>３つのテキストデータ型 (String, strict Text, lazy Text) を使っている。これらは混ぜて使うことができる。
  <li>準クォートに lt を使うことで、lazy Text を生成する。strict Text を生成する st もある。

<h2>一般的に推奨される方法

<p>
  これは Yesod コミュニティから得られた、Shakespeare を最大限に活かすためのヒントだ。

<ul>
  <li>実際のサイトでは外部ファイルを使うこと。ライブラリでは、長すぎなければ準クォートを使っても構わない。
  <li>
    Patrick Brisbin が作った #
    <a href="https://github.com/pbrisbin/html-template-syntax">Vim code highlighter
    \ を使おう。
  <li>終了タグを書かないようにすること。この例外は、大きなテキストブロック内にある &lt;i&gt; と &lt;b&gt; タグだけだ。
